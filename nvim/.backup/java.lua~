local jdtls_directory = vim.fn.stdpath("data") .. "/home/tortuga/.local/share/nvim/mason/packages/jdtls"
local config_directory = jdtls_directory .. "/config_linux_arm"
local plugins_dir = jdtls_directory .. "/plugins"
local path_to_jar = plugins_dir .. "/org.eclipse.equinox.launcher_1.6.500.v20230717-2134.jar"
local path_to_lombok = jdtls_directory .. "/lombok.jar"

local root_markers = { "gradlew", "pom.xml", ".git", "build.gradle", "mvnw" }
local root_dir = require("jdtls.setup").find_root(root_markers)

if root_dir == "" then
	print("Could not find project root directory")
	return
end

local project_name = vim.fn.fnamemodify(vim.fn.getcwd(), ":p:h:t")
local workspace_dir = vim.fn.stdpath("data") .. "/site/java/workspace-root/" .. project_name

os.execute("mkdir " .. workspace_dir)

local config = {
	cmd = {
		"java",
		"-Declipse.application=org.eclipse.jdt.ls.core.id1",
		"-Dosgi.bundles.defaultStartLevel=4",
		"-Declipse.product=org.eclipse.jdt.ls.core.product",
		"-Dlog.protocol=true",
		"-Dlog.level=ALL",
		"-javaagent:" .. path_to_lombok,
		"--add-modules=ALL-SYSTEM",
		"--add-opens java.base/java.util=ALL-UNNAMED",
		"--add-opens java.base/java.lang=ALL-UNNAMED",
		"-jar",
		path_to_jar,
		"-configuration",
		config_directory,
		"-data",
		workspace_dir,
	},
	root_dir = root_dir,
	settings = {
		java = {
			home = "/usr/bin/java",
			eclipse = {
				downloadSources = true,
			},
			configuration = {
				updateBuildConfiguration = "interactive",
				runtimes = {
					{
						name = "JavaSE-19",
						path = "/usr/bin/java",
					},
				},
			},
			maven = {
				downloadSources = true,
			},
			implementationsCodeLens = {
				enabled = true,
			},
			referencesCodeLens = {
				enabled = true,
			},
			references = {
				includeDecompiledSources = true,
			},
			format = {
				enabled = true,
				settings = {
					url = vim.fn.stdpath("config") .. "lang-servers/intellij-java-google-style.xml",
					profile = "GoogleStyle",
				},
			},
			signatureHelp = {
				enabled = true,
			},
			completion = {
				favoriteStaticMembers = {
					"org.hamcrest.MatcherAssert.assertThat",
					"org.hamcrest.Matchers.*",
					"org.hamcrest.CoreMatchers.*",
					"org.junit.jupiter.api.Assertions.*",
					"java.util.Objects.requireNonNull",
					"java.util.Objects.requireNonNullElse",
					"org.mockito.Mockito.*",
				},
				importOrder = {
					"java",
					"javax",
					"com",
					"org",
				},
			},
			sources = {
				organizeImports = {
					starThreshold = 9999,
					staticStarThreshold = 9999,
				},
			},
			codeGeneration = {
				toString = {
					template = "${object.className}{${member.name()}=${member.value}, ${otherMembers}}",
				},
				useBlocks = true,
			},
			flags = {
				allow_incremental_sync = true,
			},
			init_options = {
				bundles = {},
			},
		},
	},
}

config["on_attach"] = function(_, bufnr)
	require("keymaps").map_java_keys(bufnr)
	require("lsp_signature").on_attach({
		bind = true, -- This is mandatory, otherwise border config won't get registered.
		floating_window_above_cur_line = false,
		padding = "",
		handler_opts = {
			border = "rounded",
		},
	}, bufnr)
	require("jdtls").setup_dap({ hotcodereplace = "auto" })
end
-- This starts a new client & server,
-- or attaches to an existing client & server depending on the `root_dir`.
require("jdtls").start_or_attach(config)
