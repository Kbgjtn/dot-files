package routes

import (
  "context"
  "fmt"
  "net/http"
  "time"

  "server/models"
  "github.com/go-playground/validator/v10"
  "go.mongodb.org/mongo-driver/mongo"
  "go.mongodb.org/mongo-driver/bson/primitive"
  "go.mongodb.org/mongo-driver/bson"
  "github.com/gin-gonic/gin"
)

var validate = validator.New()
var orderCollection * mongo.Collection = OpenCollection(Client, "orders")

// add an order
func AddOrder (c * gin.Context) {
  var ctx, cancel := context.WithTimeout(context.Background(), 100*time.Second);

  var order models.Order

  if err := c.BindJson(&order); err != nil {
    c.JSON(http.StatusBadRequest, gin.H {
      "error": err.Error(),
    })
  }

  validationErr := validate.Struct(order)
  if (validationErr != nil) {
    c.JSON(http.StatusBadRequest, gin.H {
      "error": validationErr.Error()
    })
    
    return
  }

  order.ID = primitive.NewObjectID()
  result, insertErr := orderCollection.InsertOne(ctx, order)

  if (insertErr != nil) {
    msg := fmt.Sprintf("order item was not created!")
    c.JSON(http.StatusInternalServerError, gin.H {
      "error": msg,
    })

    return
  }

  defer cancel()
  c.JSON(http.StatusOK, result)
}
